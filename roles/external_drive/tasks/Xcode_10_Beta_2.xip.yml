---
- name: asserting Xcode is staged on the target server
  stat: 
    path: "{{ target_pathfile }}"
  register: xcode_staging_pathfile

  #- name: asserting Xcode archive is valid
  #  command: "pkgutil --check-signature {{ xcode_pathfile }} | grep \"Status: signed Apple Software\""

- name: staging Xcode on to the target server
  copy:
    src: "{{ external_pathfile }}"
    dest:  "{{ target_install_basedir }}"
  when: xcode_staging_pathfile.stat.exists == False

- name: extracting staged Xcode archive in place, on the target server
  command: chdir=/Applications xip -x "{{ xcode_install_file }}"
  become: yes
  when: xcode_staging_pathfile.stat.exists == False

- name: cleaning up the staged Xcode XIP archive
  file: 
    state: absent
    path: "{{ target_install_basedir }}/{{ xcode_install_file }}" 

- name: accepting Apple license agreement
  command: "{{ target_pathfile }}/Contents/Developer/usr/bin/xcodebuild -license accept"
  become: yes
  become_method: sudo

- name: install additional xcode components
  command: "installer -pkg {{ target_pathfile }}/Contents/Resources/Packages/XcodeSystemResources.pkg -target /"
  become: yes

- name: install mobile device development package
  command: "installer -pkg {{ target_pathfile }}/Contents/Resources/Packages/MobileDeviceDevelopment.pkg -target /"
  become: yes
  become_method: sudo

- name: check on the status of developer mode
  command: DevToolsSecurity -status
  become: yes
  become_method: sudo
  register: dev_tools_security_status

- name: enable developer mode
  command: DevToolsSecurity -enable
  become: yes
  become_method: sudo
  when: "'disabled' in dev_tools_security_status.stdout"
